<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2"/>
<globals/>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="yen.20200414103032.1"><vh>For Mac users</vh></v>
<v t="amd.20150313083555.45"><vh>About cd2020pj1</vh></v>
<v t="yen.20200418212333.1"><vh>Status</vh></v>
<v t="yen.20200419213322.1"><vh>@edit .gitignore</vh></v>
<v t="yen.20200418223522.1"><vh>flutter and flask</vh>
<v t="yen.20200419224718.1"><vh>develop .js from .dart</vh></v>
<v t="yen.20200419212418.1"><vh>@path static</vh>
<v t="yen.20200419212511.1"><vh>@button drawROCtojs</vh></v>
<v t="yen.20200419230015.1"><vh>@button copy js to docs/downloads</vh></v>
<v t="yen.20200419211033.1"><vh>dart2js</vh>
<v t="yen.20200419211912.1"><vh>@edit drawROC.dart</vh></v>
<v t="yen.20200419211955.1"><vh>html for drawROC</vh></v>
<v t="yen.20200419212331.1"><vh>css for drawROC</vh></v>
</v>
</v>
</v>
<v t="yen.20200419234118.1"><vh>Flask and Cango js library</vh></v>
<v t="leo.20200311103136.1"><vh>generate self-signed certificate</vh></v>
<v t="yen.20200414104044.1"><vh>oauth2 for @gm user</vh>
<v t="yen.20200414102935.1"><vh>oauth2 使用 authomatic</vh>
<v t="yen.20200414102935.2"><vh>google 設定</vh></v>
<v t="yen.20200414102935.3"><vh>啟用步驟</vh></v>
</v>
<v t="yen.20200414150039.1"><vh>read client id and secret from file</vh></v>
<v t="yen.20200414151417.1"><vh>generate secret id for Flask</vh></v>
<v t="yen.20200414142052.1"><vh>Google logout and redirect</vh></v>
</v>
<v t="yen.20200423213714.1"><vh>Starting Flask</vh>
<v t="leo.20200409150450.1"><vh>random grouping</vh>
<v t="yen.20200418212208.1"><vh>Save grouping result into database</vh></v>
</v>
</v>
<v t="yen.20200419155906.1"><vh>Database</vh>
<v t="yen.20200419155956.1"><vh>@edit schema.sql</vh></v>
<v t="yen.20200419160014.1"><vh>@button create db</vh></v>
<v t="leo.20200311104947.1"><vh>use pybean.py to connect to SQLite</vh></v>
<v t="yen.20200419201709.1"><vh>use sqlite3 to save data to SQLite</vh></v>
<v t="leo.20200311104223.1"><vh>use peewee to connect to SQLite</vh></v>
</v>
<v t="amd.20150311165615.9"><vh>@path ./</vh>
<v t="amd.20151020231829.1"><vh>@edit .gitignore</vh></v>
<v t="leo.20200311090825.1"><vh>@edit README.md</vh></v>
<v t="amd.20150311165615.30"><vh>@edit wsgi.py</vh></v>
<v t="yen.20200414112225.1"><vh>@edit config.py</vh></v>
<v t="amd.20150311165615.31"><vh>@clean myflaskapp.py</vh>
<v t="yen.20200419202547.1"><vh>__init__</vh></v>
<v t="yen.20200420162350.1"><vh>before_request</vh></v>
<v t="yen.20200420141224.1"><vh>login_required</vh></v>
<v t="yen.20200419213555.1"><vh>drawROC</vh></v>
<v t="yen.20200420144030.1"><vh>menu</vh></v>
<v t="amd.20151020232112.1"><vh>send_static</vh></v>
<v t="amd.20151020232140.1"><vh>guess</vh></v>
<v t="amd.20151020232703.1"><vh>user</vh></v>
<v t="amd.20151020232845.1"><vh>req1</vh></v>
<v t="amd.20151020233400.1"><vh>red</vh></v>
<v t="amd.20151021000403.1"><vh>guessform</vh></v>
<v t="amd.20151021000629.1"><vh>docheck</vh></v>
<v t="leo.20200409151441.1"><vh>randomGrouping</vh></v>
<v t="yen.20200420153612.1"><vh>add_entry</vh></v>
<v t="yen.20200420153541.1"><vh>show_entries</vh></v>
<v t="leo.20200409151603.1"><vh>getNumList</vh></v>
<v t="yen.20200414111904.1"><vh>index</vh></v>
<v t="yen.20200423112001.1"><vh>alogin</vh></v>
<v t="yen.20200414111938.1"><vh>login</vh></v>
<v t="yen.20200420143358.1"><vh>logout</vh></v>
</v>
</v>
<v t="amd.20151020232503.1"><vh>@path static</vh></v>
<v t="amd.20151020234043.1"><vh>@path templates</vh>
<v t="yen.20200419213847.1"><vh>@edit drawROC.html</vh></v>
<v t="yen.20200420154412.1"><vh>@edit show_entries.html</vh></v>
<v t="yen.20200420154310.1"><vh>@edit layout.html</vh></v>
<v t="amd.20151020234049.1"><vh>@edit guess.html</vh></v>
<v t="amd.20151020234120.1"><vh>@edit user.html</vh></v>
<v t="amd.20151021000500.1"><vh>@edit guessform.html</vh></v>
<v t="amd.20151021000748.1"><vh>@edit docheck.html</vh></v>
<v t="amd.20151021083709.1"><vh>@edit toobig.html</vh></v>
<v t="amd.20151021083719.1"><vh>@edit toosmall.html</vh></v>
<v t="yen.20200423112223.1"><vh>@edit alogin.html</vh></v>
<v t="yen.20200414111626.1"><vh>@edit login.html</vh></v>
<v t="yen.20200420144223.1"><vh>@edit menu.html</vh></v>
<v t="yen.20200414111705.1"><vh>@edit index.html</vh></v>
<v t="yen.20200414111741.1"><vh>@edit base.html</vh></v>
</v>
</vnodes>
<tnodes>
<t tx="amd.20150311165615.31">@language python
# https://mde.tw/cd2020 協同設計專案
# coding: utf-8
from flask import Flask, send_from_directory, request, redirect, \
                render_template, session, make_response, \
                url_for, abort, flash, g, jsonify
import random
# for random grouping
import requests
# for authomatic
from authomatic.adapters import WerkzeugAdapter
from authomatic import Authomatic

# from config.py 導入 CONFIG
from config import CONFIG

# for _curdir
import os
# calculate pagenating
import math

# for login_required decorator
from functools import wraps

# for sqlite3 資料庫
import sqlite3
from contextlib import closing

# for add_entry
import datetime

# Instantiate Authomatic.
authomatic = Authomatic(CONFIG, 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T', report_errors=False)

# 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))

app = Flask(__name__)

# 使用 session 必須要設定 secret_key
# In order to use sessions you have to set a secret key
# set the secret key.  keep this really secret:
app.secret_key = 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T'

@others

if __name__ == "__main__":
    app.run()

</t>
<t tx="amd.20150311165615.9"></t>
<t tx="amd.20150313083555.45">Application of Python and Flask on the colloaborative mechanical design.

Stared on March 11, 2020
</t>
<t tx="amd.20151020232112.1"># setup static directory
@app.route('/static/&lt;path:path&gt;')
def send_static(path):
    return send_from_directory('static', path)</t>
<t tx="amd.20151020232140.1">@app.route("/guess")
@login_required
def guess():
    '''
    if not session.get('login'):
        return redirect(url_for('index'))
    '''
    # This is the starting form for guessing numbers game, mainly to generate answers, and to reset count to zero
    # Store answers of guessing
    theanswer = random.randint(1, 100)
    thecount = 0
    # Store the answer and the number of calculation variables in the session
    session['answer'] = theanswer
    session['count'] = thecount
    user = session.get('user')

    return render_template("guess.html", answer=theanswer, count=thecount, user=user)


</t>
<t tx="amd.20151020232503.1"></t>
<t tx="amd.20151020232703.1">@app.route('/user/&lt;name&gt;')
def user(name):
    return render_template("user.html", name=name)</t>
<t tx="amd.20151020232845.1">@app.route('/req1')
def req1():
    user_agent = request.headers.get('User-Agent')
    return '&lt;p&gt;Your browser is %s&lt;/p&gt;' % user_agent</t>
<t tx="amd.20151020233400.1">@app.route('/red')
def red():
    # redirect to google
    return redirect("http://www.google.com")</t>
<t tx="amd.20151020234043.1"></t>
<t tx="amd.20151021000403.1">@login_required
@app.route('/guessform')
def guessform():
    session["count"] += 1
    guess = session.get("guess")
    theanswer = session.get("answer")
    count = session.get("count")
    return render_template("guessform.html", guess=guess, answer=theanswer, count=count)</t>
<t tx="amd.20151021000629.1">@app.route('/docheck', methods=['POST'])
@login_required
def docheck():
    if not session.get('login'):
        return redirect(url_for('index'))
    # use session[] to save data
    # use session.get() to get session data
    # use request.form[] to get field data of form and send to template
    guess = request.form["guess"]
    session["guess"] = guess
    # if use execute doCheck directly, send it back to the root method
    if guess is None:
        redirect("/")
    # get answer from session, when execute doCheck directly, no session data will be accessed
    try:
        theanswer = int(session.get('answer'))
    except:
        redirect("/")
    # the data type from web based form is string
    try:
        theguess = int(guess)
    except:
        return redirect("/guessform")
    # every doCheck being executed increase the count session value
    session["count"] += 1
    count = session.get("count")
    # compare the answer and the guess value
    if theanswer &lt; theguess:
        return render_template("toobig.html", guess=guess, answer=theanswer, count=count)
    elif theanswer &gt; theguess:
        return render_template("toosmall.html", guess=guess, answer=theanswer, count=count)
    else:
        # 
        # got the answer, get count from session
        thecount = session.get('count')
        return "Guess "+str(thecount)+" times, finally got the answer, the answer is "+str(theanswer)+": &lt;a href='/guess'&gt;Play again&lt;/a&gt;"
    return render_template("docheck.html", guess=guess)
 </t>
<t tx="leo.20200311103136.1">Location of openssl from https://www.msys2.org/

y:\msys64\mingw64\bin\openssl.exe

openssl req -x509 -nodes -days 600 -newkey rsa:2048 -keyout cd2020.key -out cd2020.crt</t>
<t tx="leo.20200311104223.1">https://github.com/coleifer/peewee</t>
<t tx="leo.20200311104947.1">https://github.com/mdecourse/wcms-scrum1

Pybean reference:

https://github.com/jonathan-kosgei/pybean

https://github.com/johndoe46/PyBean

from pybean import Store, SQLiteWriter
library = Store(SQLiteWriter(":memory:", frozen=False))
book = library.new("book")
book.title = "Boost development with pybean"
book.author = "Charles Xavier"
library.save(book)
for book in library.find("book","author like ?",["Charles Xavier"]):
        print book.title
library.delete(book)
library.commit()

To Create a new database table

pybean.setup()
book = pybean.dispense(bean_type)
pybean.db.commit()
pybean.close()

To store data in a database table

pybean.setup()
bean_type = 'book'
bookone.name = 'Eragon'
bookone.author = 'Christopher Paolini'
bean_id = pybean.store(bookone)
pybean.db.commit()

To load data from a database table

pybean.setup()
bean_type = 'book'
bookone = pybean.dispense(bean_type)
bookone.name = 'Eldest'
bookone.author = 'Christopher Paolini'
bean_id = pybean.store(bookone)
bean = pybean.load(bean_type, bean_id)
#print(bean)

To enter multiple rows in a database table

pybean.setup()
bean_type1 = 'movies'
bean_type2 = 'books'
beans = pybean.dispenseAll(bean_type1, bean_type2)
pybean.db.commit()

To load multiple rows from a database table

pybean.setup()
bean_type = 'book'
book = pybean.dispense(bean_type)
book.title = 'The Inheritance'
id1 = pybean.store(book)
page = pybean.dispense(bean_type)
page.number = 145
id2 = pybean.store(page)
#print(id2, page)
beans = pybean.loadAll(bean_type, id1, id2)
#print(beans)
pybean.close()

To delete a row in a database table

pybean.setup()
bean_type = 'book'
bookone = pybean.dispense(bean_type)
bookone.name = 'Eldest'
bookone.author = 'Christopher Paolini'
id = pybean.store(bookone)
pybean.trash(bookone.type, id)
pybean.close()

To delete multiple rows in a database table

pybean.setup()
bean_type1 = 'book'
bean_type2 = 'book'
beans = pybean.dispenseAll(bean_type1, bean_type2)
beans[0].name = 'The Man from St.Petersburg'
beans[1].name = 'Preface'
id1 = pybean.store(beans[0])
id2 = pybean.store(beans[1])
pybean.trashAll('book', id1, id2)
pybean.close()

To delete a database table

pybean.setup()
cursor = pybean.db.cursor()
bean_type = 'book'
book = pybean.dispense(bean_type)
book.title = 'Head Fist C#'
id = pybean.store(book)
pybean.wipe('book')
pybean.close()

To delete an entire database

pybean.setup()
pybean.nuke()</t>
<t tx="leo.20200409150450.1">@language python
import random
import requests

# get the distributed list among each group
def getNumList(total, eachGrp=10):
    # total is the number of students
    # each group at least 10 students
    #eachGrp = 10;
    # may divide into "grpNum" number of group
    grpNum = total // eachGrp;
    # check grpNum
    #print(grpNum)
    # vacan list
    splits = []
    # find remainder when total number divid into "grpNum" number of group
    remainder = total % grpNum
    # number of people in one group by calculation
    calGrp = total // grpNum

    for i in range(grpNum):
        splits.append(calGrp)

    # check first splits
    #print(splits)

    for i in range(remainder):
        splits[i] += 1

    # check final splits
    #print(splits);
    return splits;
 
# url to get the student number data
target_url = "http://mde.tw/cd2020/downloads/2020spring_cd_2a_list.txt"
# use requests to retrieve data from url
f = requests.get(target_url)
# get student list from target_url
# use splitlines() to put student number into studList
studList = f.text.splitlines()
# minimum number for each group
num_in_one_group = 10
# temp list to save the student number for each group
gpList = []
# whole class list
group = []
# number of member list for each group
numList = []
# get numList
numList = getNumList(len(studList), num_in_one_group)
# check numList
# list numList
print("Expected number of member list:" + str(numList))

output = ""
gth = 1
inc = 0

# use shuffle method of random module to shuffle studList
random.shuffle(studList)
output += "Before sort: \n"
for i in numList:
    # print 20 * sign
    output += '=' * 20 + "\n";
    output += "group " + str(gth) + " 有 " + str(i) + " 人: \n"
    # reset group list
    gpList = []
    for j in range(i):
        output += studList[j+inc] + "\n"
        # append student number into grpList
        gpList.append(studList[j+inc])

    gth = gth + 1
    inc = inc + j
    # sort gpList
    gpList.sort()
    group.append(gpList)
 
# print output which is the result before sorting
print(output)
# print group whis is the sorted result
print("Sorted result:" + str(group))
 
output = ""
# output sorted result
output += '=' * 25 + "\n"
output += 'Sorted result:\n'
gth = 1
 
# list sorted data seperated by \n
for i in range(len(group)):
    # print seperated mark
    output += '=' * 20 + "\n"
    output += "group" + str(gth) + "\n"
    gpList = []

    for j in range(len(group[i])):
        output += str(group[i][j]) + "\n"

    gth = gth + 1

print(output)</t>
<t tx="leo.20200409151441.1">@app.route("/randomgrouping")
@login_required
def randomGrouping():
    # url to get the student number data
    target_url = "http://mde.tw/cd2020/downloads/2020spring_cd_2a_list.txt"
    # use requests to retrieve data from url
    f = requests.get(target_url)
    # get student list from target_url
    # use splitlines() to put student number into studList
    studList = f.text.splitlines()
    # minimum number for each group
    num_in_one_group = 10
    # temp list to save the student number for each group
    gpList = []
    # whole class list
    group = []
    # number of member list for each group
    numList = []
    # get numList
    numList = getNumList(len(studList), num_in_one_group)
    # check numList
    # list numList
    #print("Expected number of member list:" + str(numList))
    
    output = ""
    gth = 1
    inc = 0
    
    # use shuffle method of random module to shuffle studList
    random.shuffle(studList)
    output += "Before sort: &lt;br /&gt;"
    for i in numList:
        # print 20 * sign
        output += '=' * 20 + "&lt;br /&gt;";
        output += "group " + str(gth) + " has " + str(i) + " members:&lt;br /&gt;"
        # reset group list
        gpList = []
        for j in range(i):
            output += studList[j+inc] + "&lt;br /&gt;"
            # append student number into grpList
            gpList.append(studList[j+inc])

        gth = gth + 1
        inc = inc + j
        # sort gpList
        gpList.sort()
        group.append(gpList)

    # print output which is the result before sorting
    print(output)
    # print group whis is the sorted result
    print("Sorted result:" + str(group))

    output = ""
    # output sorted result
    output += '=' * 20 + "&lt;br /&gt;"
    output += 'Sorted result:&lt;br /&gt;'
    gth = 1

    # list sorted data seperated by \n
    for i in range(len(group)):
        # print seperated mark
        output += '=' * 20 + "&lt;br /&gt;"
        output += "group" + str(gth) + "&lt;br /&gt;"
        gpList = []

        for j in range(len(group[i])):
            output += str(group[i][j]) + "&lt;br /&gt;"

        gth = gth + 1

    print(output)
    
    # add grouping result into grouping table of /db/database.db
    date = datetime.datetime.now().strftime("%b %d, %Y - %H:%M:%S")
    user = session.get("user")
    result = str(group)
    # 希望新增重複資料查驗功能
    g.db.execute('insert into grouping (user , date, result, memo) values (? , ?, ?, ?)',
            (user, date, result, "memo"))
    g.db.commit()
    flash('已經新增一筆資料!')
    return output</t>
<t tx="leo.20200409151603.1"># get the distributed list among each group
def getNumList(total, eachGrp=10):
    # total is the number of students
    # each group at least 10 students
    #eachGrp = 10;
    # may divide into "grpNum" number of group
    grpNum = total // eachGrp;
    # check grpNum
    #print(grpNum)
    # vacan list
    splits = []
    # find remainder when total number divid into "grpNum" number of group
    remainder = total % grpNum
    # number of people in one group by calculation
    calGrp = total // grpNum

    for i in range(grpNum):
        splits.append(calGrp)

    # check first splits
    #print(splits)

    for i in range(remainder):
        splits[i] += 1

    # check final splits
    #print(splits);
    return splits;</t>
<t tx="yen.20200414102935.1">http://peterhudec.github.io/authomatic/</t>
<t tx="yen.20200414102935.2">config.py

from authomatic.providers import oauth2

CONFIG = {
        'google': {
            'class_': oauth2.Google,
            'consumer_key': '##########',
            'consumer_secret': '##########',
            'id': authomatic.provider_id(),
            'scope': oauth2.Google.user_info_scope
        }
    }
    '''
        'scope': ['https://www.googleapis.com/auth/userinfo.profile',
        'https://www.googleapis.com/auth/userinfo.email']
    '''

main.py

from flask import Flask, render_template, request, make_response
from authomatic.adapters import WerkzeugAdapter
from authomatic import Authomatic

from config import CONFIG

@app.route('/')
def index():
    return render_template('index.html')
    
@app.route('/login/&lt;provider_name&gt;/', methods=['GET', 'POST'])
def login(provider_name):
    response = make_response()
    result = authomatic.login(WerkzeugAdapter(request, response), provider_name)
    
    # You need to set a secret string otherwise the session will not work.
app.secret_key = 'random secret string'

    result = authomatic.login(
    WerkzeugAdapter(request, response),
    provider_name,
    session=session,
    session_saver=lambda: app.save_session(session, response)
    )
    if result:
        if result.user:
            result.user.update()
        return render_template('login.html', result=result)
    return response
    
{# base.html #}
&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Authomatic Flask Example&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        {% block body %}{% endblock %}
    &lt;/body&gt;
&lt;/html&gt;

{# index.html #}
{% extends "base.html" %}
{% block body %}

    &lt;!--Links to the login handler--&gt;
    Login with &lt;a href="login/fb"&gt;Facebook&lt;/a&gt;.&lt;br /&gt;
    Login with &lt;a href="login/tw"&gt;Twitter&lt;/a&gt;.&lt;br /&gt;
    
    &lt;!--OpenID form--&gt;
    &lt;form action="login/oi"&gt;
        &lt;input type="text" name="id" value="me.yahoo.com" /&gt;
        &lt;input type="submit" value="Authenticate With OpenID"&gt;
    &lt;/form&gt;

{% endblock %}

{# login.html #}
{% extends "base.html" %}
{% block body %}
    &lt;a href="/"&gt;Home&lt;/a&gt;
    
    {% if result.error %}
        &lt;h2&gt;Damn that error: {{ result.error.message }}&lt;/h2&gt;
    {% endif %} 
    
    {% if result.user %}
        &lt;h1&gt;Hi {{ result.user.name }}&lt;/h1&gt;
        &lt;h2&gt;Your id is: {{ result.user.id }}&lt;/h2&gt;
        &lt;h2&gt;Your email is: {{ result.user.email }}&lt;/h2&gt;
    {% endif %}
    
    {% if result.user.credentials %}
            {% if result.provider.name == 'fb' %}
            Your are logged in with Facebook.&lt;br /&gt;
            {% set url = 'https://graph.facebook.com/{0}?fields=feed.limit(5)'.format(result.user.id) %}
            {% set response = result.provider.access(url) %}
            {% if response.status == 200 %}
            {% if response.data.error %}
                Damn that error: {{ response.data.error }}!
            {% endif %}
             {% if response.data.feed.data %}
                Your 5 most recent statuses:&lt;br /&gt;
                {% for status in response.data.feed.data %}
                    &lt;h3&gt;{{ status.message or status.name or status.story }}&lt;/h3&gt;
                    Posted on: {{ status.created_time }}
                {% endfor %}
            {% endif %}
                {% endif %}{# response.status == 200 #}
            {% endif %}{# result.provider.name == 'fb' #}
</t>
<t tx="yen.20200414102935.3">
設定網址:

https://console.developers.google.com

總共有兩項設定:

1. 啟用 Google + API

2. 然後到憑證處建立專案, 設定授權的 URI

然後 config.py 部份:

##############################################

import authomatic
from authomatic.providers import oauth2

CONFIG = {
        'google': {
            'class_': oauth2.Google,
            'consumer_key': '#######',
            'consumer_secret': '#######',
            'scope': oauth2.Google.user_info_scope
        }
    }
    
###############################################

# 接著為 login 部份

@app.route('/autho_login/&lt;provider_name&gt;/', methods=['GET', 'POST'])
def autho_login(provider_name):
    
    # We need response object for the WerkzeugAdapter.
    response = make_response()
    
    # Log the user in, pass it the adapter and the provider name.
    result = authomatic.login(WerkzeugAdapter(request, response), provider_name)
    
    # If there is no LoginResult object, the login procedure is still pending.
    if result:
        if result.user:
            # We need to update the user to get more info.
            result.user.update()
        
        # The rest happens inside the template.
        return render_template('autho_login.html', user_name=result.user.name, user_id=result.user.id, user_email=result.user.email, result=result)
    
    # Don't forget to return the response.
    return response</t>
<t tx="yen.20200414103032.1">Environment:

    Leo Editor 6.2.1 final
    Python 3.7.3
    PyQt 5.12.3
    Darwin

Notice for Mac user:

    the System Preferences -&gt; General 
        need to set to Auto to get the correct menu theme color
        
    it seems only the last open .leo file can use File -&gt; Save, other previous open .leo files can only be saved while file close.
    
    outline copy and paste only working for mouse click not from pull-down menu</t>
<t tx="yen.20200414104044.1">Setup URL

https://console.developers.google.com

First setup, the welcome popup:

    Welcome, KMOLab!
    
    Create and manage your Google Cloud Platform instances, disks, networks and other resources in one place.
    
    need to agree the Terms of Service.
    
You have 12 projects remaining in your quota. 

----
Enable Google + Domain API

Go to credentials

Remember to configure the OAuth consent screen with information about your application.

----
OAuth consent screen

Choose how you want to configure and register your app, including your target users. You can only associate one app with your project.

User type:

choose internal: only allow @gm user to login

Press Create
----
Create OAuth client ID

Application type: Web application</t>
<t tx="yen.20200414111904.1">@app.route('/')
# root of the system can not set "login_required" decorator
def index():
    return render_template('index.html')
</t>
<t tx="yen.20200414111938.1">@app.route('/login/&lt;provider_name&gt;/', methods=['GET', 'POST'])
def login(provider_name):
    
    # We need response object for the WerkzeugAdapter.
    response = make_response()
    
    # Log the user in, pass it the adapter and the provider name.
    result = authomatic.login(WerkzeugAdapter(request, response), provider_name)
    
    # If there is no LoginResult object, the login procedure is still pending.
    if result:
        if result.user:
            # We need to update the user to get more info.
            result.user.update()
        
        # use session to save login user's email (試著將 @ 換為 _at_)
        #session['loginEmail'] = result.user.email.replace('@', '_at_')
        loginUser = result.user.email.split("@")[0]
        session["user"] = loginUser
        session["login"] = True
        
        CALLBACK_URL = "https://localhost:8443/menu"
    
        # The rest happens inside the template.
        return render_template('login.html', result=result, CALLBACK_URL=CALLBACK_URL)
    
    # Don't forget to return the response.
    return response
</t>
<t tx="yen.20200414142052.1">https://stackoverflow.com/questions/4202161/google-account-logout-and-redirect

https://www.google.com/accounts/Logout?continue=https://appengine.google.com/_ah/logout?continue=https://localhost:8443/guess

When user login with Gmail account, user email is saved into session and logout from Gmail by using javascript and redirect to https://localhost:8443/guess</t>
<t tx="yen.20200414150039.1">@language python

keyFile = open('./../oauth_gm.txt', 'r')
with open('./../oauth_gm.txt', 'r') as f:
    key = f.read().splitlines()
g.es(key)</t>
<t tx="yen.20200414151417.1">@language python
# Windows use Ctrl + b to execute under Leo Editor node
# Mac use Command +b to execute
# app.secret_key = 'A0Zr9@8j/3yX R~XHH!jmN]LWX/,?R@T'
# this key is to keep the session safe
import secrets

g.es(secrets.token_urlsafe(24))

# 6Xpn4BDO5b1t39dNcPH6PAWTlQaD4B8X
# c8aDEUckVQnZ8nwkAgGSk3nvS_beJYkL
# WFUABb_IPfxvdZgaih4Lecik4giKBtTd</t>
<t tx="yen.20200418212208.1"></t>
<t tx="yen.20200418212333.1">1. oauth2 to login with Gmail account
after system got user email, use session to save user email account and logout from Gmail right away.

and then redirect to guess method

2. need to save the /randomgrouping result into SQLite database

3. socketio?

http://mde.tw/cp2019/content/Flutter%20Mobile.html</t>
<t tx="yen.20200418223522.1">https://medium.com/@pyzimos/flutter-chatbot-with-python-flask-backend-heroku-deployment-706baafbb8f1</t>
<t tx="yen.20200419155906.1"></t>
<t tx="yen.20200419160014.1">@language python
'''
local_data/db/database.db
'''
import os

os.system("sqlite3 db/database.db &lt; schema.sql")
# echo string
'''
for Leo Editor:
c is the commander of the outline containing the script.
g is Leo’s leo.core.leoGlobals module.
p is the presently selected position, the same as c.p.
'''
g.es("database.db created")</t>
<t tx="yen.20200419201709.1">@language python
# sqlite3 is default for Python3
import sqlite3
# g is global object for Leo Editor
# es is the "echo string" method of g object
g.es("sqlite3")

# https://flask.palletsprojects.com/en/1.1.x/patterns/sqlite3/</t>
<t tx="yen.20200419202547.1">def __init__():
    # create required directory
    if not os.path.isdir(_curdir+"db"):
        try:
            os.makedirs(_curdir+"db")
        except:
            print("db mkdir error")
    # create SQLite database file if not existed
    try:
        # need to check if this work with Windows
        conn = sqlite3.connect(_curdir+"/db/database.db")
        cur = conn.cursor()
        # create table
        cur.execute("CREATE TABLE IF NOT EXISTS grouping( \
                id INTEGER PRIMARY KEY AUTOINCREMENT, \
                user TEXT not null, \
                date TEXT not null, \
                result TEXT not null, \
                memo TEXT);")
        cur.close()
        conn.close()
    except:
        print("can not create db and table")
    with closing(connect_db()) as db:
        with app.open_resource('schema.sql' , mode='r') as f:
            db.cursor().executescript(f.read())
        db.commit()
    print("do nothing")
</t>
<t tx="yen.20200419211033.1">On Mac

dart2js located at

/Users/login_account/development/flutter/bin/cache/dart-sdk/bin

cd
vi .bash_profile

export PATH="$PATH:/Users/login_account/development/flutter/bin/cache/dart-sdk/bin"

source ./bash_profile</t>
<t tx="yen.20200419211955.1">@language html

&lt;div id="wrapper"&gt;
  &lt;canvas id="canvas" width="300" height="200"&gt;&lt;/canvas&gt;&lt;br /&gt;
  &lt;button id="button"&gt;Clear Canvas&lt;/button&gt;
  &lt;button id="roc"&gt;Draw ROC&lt;/button&gt;
  &lt;button id="usa"&gt;Draw USA&lt;/button&gt;
&lt;/div&gt;</t>
<t tx="yen.20200419212331.1">html, body {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
}

#wrapper {
  width: 300px;
  margin: auto;
  border: solid thin black;
}</t>
<t tx="yen.20200419212418.1"></t>
<t tx="yen.20200419212511.1">@language python
'''
static/drawROC.js
'''
import os

# https://dart.dev/tools/dart2js#basic-options
# -02 is for dart2js optimization level

os.system("/Users/yen/development/flutter/bin/cache/dart-sdk/bin/dart2js -02 -o drawROC.js drawROC.dart")
# echo string
'''
for Leo Editor:
c is the commander of the outline containing the script.
g is Leo’s leo.core.leoGlobals module.
p is the presently selected position, the same as c.p.
'''
g.es("drawROC.js created")</t>
<t tx="yen.20200419213555.1">@app.route('/drawROC')
@login_required
def drawROC():
    return render_template("drawROC.html")
    </t>
<t tx="yen.20200419224718.1">Here we use Flask to send variables through GET or POST to integrated with Dart programs.</t>
<t tx="yen.20200419230015.1">@language python
import os

os.system("cp drawROC.js ./../docs/downloads/")
# echo string
'''
for Leo Editor:
c is the commander of the outline containing the script.
g is Leo’s leo.core.leoGlobals module.
p is the presently selected position, the same as c.p.
'''
g.es("copy drawROC.js to ./../docs/downloads/")</t>
<t tx="yen.20200419234118.1">https://www.arc.id.au/GearDrawing.html</t>
<t tx="yen.20200420141224.1">def login_required(f):
    @wraps(f)
    def wrap(*args, **kwargs):
        if 'login' in session:
            return f(*args, **kwargs)
        else:
            flash("You need to login first")
            return redirect(url_for('index'))

    return wrap
</t>
<t tx="yen.20200420143358.1">@app.route('/logout')
def logout():
    session.pop('login' , None)
    session.pop('user', None)
    flash('Logged out!')
    return redirect(url_for('index'))</t>
<t tx="yen.20200420144030.1">@app.route("/menu")
@login_required
def menu():
    menuList = ["guess", "drawROC", "randomgrouping", "show_entries"]
    return render_template("menu.html", menuList=menuList)</t>
<t tx="yen.20200420153541.1"># set default value of the variables accordingly
@app.route('/show_entries', defaults={'page': 1, 'item_per_page': 10})
@app.route('/show_entries/&lt;int:page&gt;', defaults={'item_per_page': 10})
@app.route('/show_entries/&lt;int:page&gt;/&lt;int:item_per_page&gt;')
@login_required
# 內定每頁顯示 10 筆資料, 從第1頁開始
def show_entries(page, item_per_page):
    # 先取得資料總筆數
    cur = g.db.execute('select * from grouping;')
    total_number = len(cur.fetchall())
    query_string = 'select id, user , date, result, memo from grouping order by id desc limit '+str(item_per_page)+' offset '+str((page-1)*item_per_page)
    cur = g.db.execute(query_string)
    grouping = [dict(id=row[0], user=row[1], date=row[2], result=row[3], memo=row[4]) for row in cur.fetchall()]
    totalpage = math.ceil(total_number/int(item_per_page))
    return render_template('show_entries.html' , grouping = grouping, total_number=total_number, \
                    page=page, item_per_page=item_per_page, totalpage=totalpage)
</t>
<t tx="yen.20200420153612.1">@app.route('/add_entry',methods=['POST'])
@login_required
def add_entry():
    date = datetime.datetime.now()
    # 希望新增重複資料查驗功能
    g.db.execute('insert into grouping (user , date, result, memo) values (? , ?, ?, ?)',
            (request.form['user'], date, request.form['result'], \
            request.form['memo']))
    g.db.commit()
    flash('已經新增一筆資料!')
    return redirect(url_for('show_entries'))
</t>
<t tx="yen.20200420162350.1">@app.before_request
def before_request():
    # need to check if this works with Windows
    g.db = sqlite3.connect(_curdir+"/db/database.db")</t>
<t tx="yen.20200423112001.1">@app.route('/alogin' , methods=['GET' , 'POST'])
def alogin():
    error = None
    if request.method == 'POST':
        if request.form['username'] != "admin":
            error = '錯誤!'
        elif request.form['password'] != "admin":
            error = '錯誤!'
        else :
            session['login'] = True
            session['user'] = "alogin"
            flash('已經登入!')
            return redirect(url_for('menu'))
    return render_template('alogin.html' , error = error)
</t>
<t tx="yen.20200423213714.1">from flask import Flask

app = Flask(__name__)

@app.route('/') 
def hello_world():
    return 'Hello, From Flask!'

if __name__== '__main__': 
	app.run()</t>
</tnodes>
</leo_file>
